<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>JavaScript Quiz</title>
    <link href="http://javascriptquiz.com/atom.xml" rel="self"/>
    <link href="http://javascriptquiz.com"/>
    <updated>2011-11-28T02:13:00Z</updated>
    <id>http://javascriptquiz.com</id>
    <author>
        <name>Aaron Powell</name>
        <email>me@aaron-powell.com</email>
    </author>

    
        
            <entry>
                <title>Q18 - Powerful properties</title>
                <link href="http://javascriptquiz.com/blog/q18-powerful-properties.html"/>
                <updated>2011-11-28T00:00:00Z</updated>
                <id>http://javascriptquiz.com/blog/q18-powerful-properties.html</id>
                <content type="html">

The following example uses a ECMAScript 5 properties and also fails.

Is it possible to use `defineProperty` on a frozen object and have it not fail?

&lt;script src=&quot;https://gist.github.com/1397338.js&quot;&gt; &lt;/script&gt;

Post your JavaScript as a comment. Comments will be held in the moderation queue until the answer is posted. Full answer and explanation will be appended to this post around 72 - 96 hours after the question is posted.

If you don't want your answer public, please post a comment like 'playing at home' so I can at least guage how many people are participating and whether the questions are useful.

Good Luck :).</content>
            </entry>
        
    
        
            <entry>
                <title>Q17 - Really negative</title>
                <link href="http://javascriptquiz.com/blog/q17-really-negative.html"/>
                <updated>2011-11-21T00:00:00Z</updated>
                <id>http://javascriptquiz.com/blog/q17-really-negative.html</id>
                <content type="html">

Under what conditions would the following code snippet return a result of `true`?

&lt;script src=&quot;https://gist.github.com/1380123.js&quot;&gt; &lt;/script&gt;

&lt;span style=&quot;text-decoration: line-through;&quot;&gt;Post your JavaScript as a comment. Comments will be held in the moderation queue until the answer is posted. Full answer and explanation will be appended to this post around 72 - 96 hours after the question is posted.&lt;/span&gt;

&lt;span style=&quot;text-decoration: line-through;&quot;&gt;If you don't want your answer public, please post a comment like 'playing at home' so I can at least guage how many people are participating and whether the questions are useful.&lt;/span&gt;

Good Luck :).

* * *

The JavaScript [Number][1] type is an implementation of IEEE 754 and it has all the really exciting things that come along with that.

One of the things that is included in the numbering thing is the implementation of `-0`.

If you guessed that `-0` will return `true` then you're right, well at least you're *partially* right (excluding values that coerce to 0), there's actually another value (well, range of values) that will do it...

Any number less than or equal to `-Math.pow(2, -1074)` will also return `-Infinity` when the divisor of 1, thus resulting in true being retured. Sorry I'm not enough of a math nerd to tell you *why*, just that it's an interesting footnote. If you actually want to test for `-0` then you want to do this:

    var fn = function(x) {
        return x === 0 &amp;&amp; (1/x) === -Infinitiy;
    };

Hang on though, why does `-0` equal `0` (or `+0`)?

Well if you take a look [11.9.6 - The Strict Equality Comparison Algorithm][2] (and the [11.9.3 The Abstract Equality Comparison Algorithm][3]) if they are either forms of `0` they will be treated as having the same sign.

And there you have it, that's how to test for `-0` separately from `+0`. The usefulness of this is up to you to work out :P.

  [1]: http://es5.github.com/#x8.5
  [2]: http://es5.github.com/#x11.9.6
  [3]: http://es5.github.com/#x11.9.3</content>
            </entry>
        
    
        
            <entry>
                <title>Q16 - Sortability</title>
                <link href="http://javascriptquiz.com/blog/q16-sortability.html"/>
                <updated>2011-11-07T00:00:00Z</updated>
                <id>http://javascriptquiz.com/blog/q16-sortability.html</id>
                <content type="html">

JavaScripts [Array.sort][1] method is a bit different to other array manipulation methods, rather than returning a modified version of the array it will actually modify the source array.

I've seen this as the source of many bugs but it's easy to avoid.

## Todays challenge

Sort an array *without* modifying the source array in **the fewest characters possible**.

&lt;span style=&quot;text-decoration: line-through;&quot;&gt;Post your JavaScript as a comment. Comments will be held in the moderation queue until the answer is posted. Full answer and explanation will be appended to this post around 72 - 96 hours after the question is posted.&lt;/span&gt;

&lt;span style=&quot;text-decoration: line-through;&quot;&gt;If you don't want your answer public, please post a comment like 'playing at home' so I can at least guage how many people are participating and whether the questions are useful.&lt;/span&gt;

Good Luck :).

* * *

This weeks question (ok, it ran over two weeks :P) was more about knowing JavaScript APIs.

The shortest way (that I've been able to work out) is to use the [Array.slice][2] method:

    [1,2,3].slice().sort();
    
Passing no arguments to the `slice` method it will default to `0` and return a copy of the array.

`slice` is the easiest way to shallow-clone an array.


  [1]: https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort
  [2]: https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/slice</content>
            </entry>
        
    
        
            <entry>
                <title>Q15 - What's the index?</title>
                <link href="http://javascriptquiz.com/blog/q15-what-s-the-index.html"/>
                <updated>2011-10-31T00:00:00Z</updated>
                <id>http://javascriptquiz.com/blog/q15-what-s-the-index.html</id>
                <content type="html">

Take the following JavaScript code:

&lt;script src=&quot;https://gist.github.com/1326706.js&quot;&gt; &lt;/script&gt;

How can I change the *if condition statement* so that I can compare against `true` while still using the `String.indexOf` method?

&lt;span style=&quot;text-decoration: line-through;&quot;&gt;Post your JavaScript as a comment. Comments will be held in the moderation queue until the answer is posted. Full answer and explanation will be appended to this post around 72 - 96 hours after the question is posted.&lt;/span&gt;

&lt;span style=&quot;text-decoration: line-through;&quot;&gt;If you don't want your answer public, please post a comment like 'playing at home' so I can at least guage how many people are participating and whether the questions are useful.&lt;/span&gt;

Good Luck :).

* * *

With this question we're looking at another seldom used operator in JavaScript... `~` or the [bitwise NOT operator][1]. JavaScript has a number of [bitwise operators][2] and they are used to convert an operand into a sequence of 32 bits.

The way the bitwise NOT operator works is through this formular ([source][3]):

    -(x + 1)

So when we use this with the potential results of the `String.indexOf` we shift the value by one and then rely on the falsy values in JavaScript to take care of it. Let's assume the following code:

    var index = 'abcd'.indexOf('a');
    if(~index) {
        console.log('found it!');
    }

Now if we think back to the above formular, it means we're really doing this:

    if(-(0 + 1))

    if(-(1))

    if(true)

And what if the `index` wasn't found? We'll end up with `-1` wont we? Let's pass that through our bitwise NOT?

    if(-(-1 + 1))

    if(-(0))

    if(false)

And there we go, now we've got a false value properly!

Enjoy the bitwise operators :).


  [1]: http://es5.github.com/#x11.4.8
  [2]: https://developer.mozilla.org/en/JavaScript/Reference/Operators/Bitwise_Operators
  [3]: https://developer.mozilla.org/en/JavaScript/Reference/Operators/Bitwise_Operators#.7E_(Bitwise_NOT)</content>
            </entry>
        
    
        
            <entry>
                <title>Q14 - The interval dance</title>
                <link href="http://javascriptquiz.com/blog/q14-the-interval-dance.html"/>
                <updated>2011-10-24T00:00:00Z</updated>
                <id>http://javascriptquiz.com/blog/q14-the-interval-dance.html</id>
                <content type="html">
A developer has been asked to write some JavaScript which will perform an AJAX request every 30 seconds and display the returned data on the page.

The code produced by the developer looks as follows:

&lt;script src=&quot;https://gist.github.com/1308134.js&quot;&gt; &lt;/script&gt;

What problem can come up if the server load fluctuates, resulting in the response time changing?

How would you change the code to negate the problem?

&lt;span style=&quot;text-decoration: line-through;&quot;&gt;Post your JavaScript as a comment. Comments will be held in the moderation queue until the answer is posted. Full answer and explanation will be appended to this post around 72 - 96 hours after the question is posted.&lt;/span&gt;

&lt;span style=&quot;text-decoration: line-through;&quot;&gt;If you don't want your answer public, please post a comment like 'playing at home' so I can at least guage how many people are participating and whether the questions are useful.&lt;/span&gt;

Good Luck :).

* * *

In this weeks question we were looking at a common mistake that people make when using the `setInterval` method in JavaScript. With `setInterval` the function that you pass in will always be executed when the timeout period rolls over. This is why you can run into an issue when you're using it to perform operations which you don't control the duration of, a server call.

Because of this a new design pattern has come into common use, the [Recursive SetTimeout Pattern][1]. The idea behind this pattern is that you perform your operation in a `setTimeout` callback function (using the time period you would in the interval) and within the timeout execution you kick off a new timeout.

Here is the code for the answer:

&lt;script src=&quot;https://gist.github.com/1321278.js&quot;&gt; &lt;/script&gt;

What I've done is added a name to the function, `go`, and added a new call in the success callback that will kick off the new timeout call.

  [1]: http://www.erichynds.com/javascript/a-recursive-settimeout-pattern/</content>
            </entry>
        
    
        
    
        
            <entry>
                <title>Q13 - Why is that right?</title>
                <link href="http://javascriptquiz.com/blog/q13-why-is-that-right.html"/>
                <updated>2011-10-17T00:00:00Z</updated>
                <id>http://javascriptquiz.com/blog/q13-why-is-that-right.html</id>
                <content type="html">
Assume the following conditional statement:

&lt;script src=&quot;https://gist.github.com/1291477.js&quot;&gt; &lt;/script&gt;

What are the values that `a` can be for the **truth** path to be executed?

&lt;span style=&quot;text-decoration: line-through;&quot;&gt;Post your JavaScript as a comment. Comments will be held in the moderation queue until the answer is posted. Full answer and explanation will be appended to this post around 72 - 96 hours after the question is posted.&lt;/span&gt;

&lt;span style=&quot;text-decoration: line-through;&quot;&gt;If you don't want your answer public, please post a comment like 'playing at home' so I can at least guage how many people are participating and whether the questions are useful.&lt;/span&gt;

**Update: Answer published**

* * *

*I forgot to mention that this weeks post was brought to us by [Adam Ahmed][1] from Atlassian (sorry Adam!).*

This week we've taken a look at an interesting part of the JavaScript type coercion. For this we need to take a dive into the ECMAScript 5 spec, in particular section [11.9.3 The Abstract Equality Comparison Algorithm][2].

It all comes down to how the left and right hand side parts of the equality comparision works. The first thing to note is that the right-hand side part will actually be a `boolean` type, due to the [Logical NOT operator][3] being applied. This will ultimately be converted to a number for the next part of the comparison.

Then with the left hand side (assuming it's a [primative value][4]) an attempt will be made to convert it to a [number][5]. The thing with this is that if it's something such as an **empty array** or **empty string** it'll end up as a **0** which is a falsy value, resulting in `0 == false`!

But there's another time that this can happen, you can do it with objects. As mentioned the primative types are converted to a number, but object's are not, so how can you do it with an object? You need to override the [valueOf][6] method and make it return false. That means you can do this:

    var a = { valueOf: function() { return false; } }

Since we're overriding `valueOf` the expression `a == !a` will return true. To understand why we need to look back at the Abstract Edquality Commparison Algorithm. First off the expression `!a` which is the same as `!{ ... }` will **always** return `false` (as objects are coerced to `true`) and with an object when the `ToPrimative` converson happens it'll look at the [Default Value][7], which in turn is requested from valueOf, resulting in `false == false`!

And this is yet another reason why you want to watch out how you're constructing your equality expressions.

  [1]: http://twitter.com/#!/hitsthings
  [2]: http://es5.github.com/#x11.9.3
  [3]: http://es5.github.com/#x11.4.9
  [4]: http://es5.github.com/#primitive_value
  [5]: http://es5.github.com/#x9.3
  [6]: http://es5.github.com/#x15.2.4.4
  [7]: http://es5.github.com/#x8.12.8</content>
            </entry>
        
    
        
    
        
            <entry>
                <title>New site</title>
                <link href="http://javascriptquiz.com/blog/new-site.html"/>
                <updated>2011-10-13T00:00:00Z</updated>
                <id>http://javascriptquiz.com/blog/new-site.html</id>
                <content type="html">

You might have noticed some changes, well finally JavaScript Quiz has a new home. No more posterous and it's comment spamming, we've got a lovely new platform.

You can read more about it on [my blog][1].

I'll port the old questions over when I get a bit more time.

  [1]: http://www.aaron-powell.com/javascript/rebuilding-javascript-quiz-in-nodejs</content>
            </entry>
        
    
        
            <entry>
                <title>Q12 - Operator Please</title>
                <link href="http://javascriptquiz.com/blog/q12-operator-please.html"/>
                <updated>2011-10-05T00:00:00Z</updated>
                <id>http://javascriptquiz.com/blog/q12-operator-please.html</id>
                <content type="html">
*This post was migrated from the old website. For the initial answers that people submitted (and aren't migrated) please see [here][4].*

What is the result of executing function `b` in the following code snippet?

&lt;script src=&quot;https://gist.github.com/1238701.js&quot;&gt; &lt;/script&gt;

Post your JavaScript as a comment. Comments will be held in the moderation queue until the answer is posted. Full answer and explanation will be appended to this post around 72 - 96 hours after the question is posted.

&lt;span style=&quot;text-decoration: line-through;&quot;&gt;If you don't want your answer public, please post a comment like 'playing at home' so I can at least guage how many people are participating and whether the questions are useful.&lt;/span&gt;  

Updated: Answer published.

Follow [@JavaScriptQuiz][1] to know when the answer is up and to catch the next question.

Happy hacking.

* * *

The result of executing the function **b** is **2**, and this is because of the [comma is an operator][2] in JavaScript! The comma operator is the very bottom of the operator evaluation stack, meaning a trailing comma will cause following commands to be evaluated and in this case, returned.

The comma operator is quite often seen used in for loops like so:

`for(var i = 0, j = array.length; i &lt; j; i++)`

Here we're using the comma operator to chain variable assignments.

There's a lot of interesting things which can be done with the comma operator, [have a read here for more ideas][3].

 [1]: http://twitter.com/JavaScriptQuiz
 [2]: http://es5.github.com/#x11.14
 [3]: http://javascriptweblog.wordpress.com/2011/04/04/the-javascript-comma-operator/
 [4]: http://javascriptquiz.posterous.com/q12-operator-please</content>
            </entry>
        
    
        
            <entry>
                <title>Q11 - Spot the bug</title>
                <link href="http://javascriptquiz.com/blog/q11-spot-the-bug.html"/>
                <updated>2011-09-28T00:00:00Z</updated>
                <id>http://javascriptquiz.com/blog/q11-spot-the-bug.html</id>
                <content type="html">
&lt;p&gt;&lt;em&gt;This post was migrated from the old website. For the initial answers that people submitted (and aren't migrated) please see &lt;a href=&quot;http://javascriptquiz.posterous.com/q11-spot-the-bug&quot;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There is a bug in the following code, without running it can you spot where the bug is?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/1236887&quot;&gt;https://gist.github.com/1236887&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: line-through;&quot;&gt;Post your JavaScript as a comment. Comments will be held in the moderation queue until the answer is posted. Full answer and explanation will be appended to this post around 72 - 96 hours after the question is posted.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: line-through;&quot;&gt;If you don't want your answer public, please post a comment like 'playing at home' so I can at least guage how many people are participating and whether the questions are useful.&lt;/span&gt; &lt;strong&gt;Update:&lt;/strong&gt; answer now posted.&lt;/p&gt;
&lt;p&gt;Follow &lt;a href=&quot;http://twitter.com/JavaScriptQuiz&quot;&gt;@JavaScriptQuiz&lt;/a&gt; to know when the answer is up and to catch the next question.&lt;/p&gt;
&lt;p&gt;Happy hacking.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The bug is that the method &lt;code&gt;showData&lt;/code&gt; does not exist on the &lt;code&gt;window&lt;/code&gt; object so when the callback from the AJAX response happens it will fall over.&lt;/p&gt;
&lt;p&gt;This happens because of the way the &lt;code&gt;this&lt;/code&gt; value is handled within JavaScript. In JavaScript the &lt;code&gt;this&lt;/code&gt; value is scoped to the current function and is not at a class level like you would expect in compiled languages.&lt;/p&gt;
&lt;p&gt;But you can use JavaScript closures to ensure that this doesn&amp;rsquo;t catch you out, if you assign the &lt;code&gt;this&lt;/code&gt; value to a variable before the callback executes (eg: the top of the &lt;code&gt;getData&lt;/code&gt; function) it&amp;rsquo;ll then be available through that variable.&lt;/p&gt;
&lt;p&gt;This is why you see a lot of JavaScript code with lines like:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;var that = this;&lt;/code&gt;&lt;/p&gt;</content>
            </entry>
        
    
        
    
        
            <entry>
                <title>Q10 - Who shot first?</title>
                <link href="http://javascriptquiz.com/blog/q10-who-shot-first.html"/>
                <updated>2011-09-19T00:00:00Z</updated>
                <id>http://javascriptquiz.com/blog/q10-who-shot-first.html</id>
                <content type="html">
&lt;p&gt;&lt;em&gt;This post was migrated from the old website. For the initial answers that people submitted (and aren't migrated) please see &lt;a href=&quot;http://javascriptquiz.posterous.com/q10-who-shot-first&quot;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Without executing the following code snippet, &lt;em&gt;who shot first&lt;/em&gt;? (Accordnig to the majority of JavaScript runtimes)&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/1225982.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;In addition do the first two timeouts execute in place or not? If not, when do they execute?&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: line-through;&quot;&gt;Post your JavaScript as a comment. Comments will be held in the moderation queue until the answer is posted. Full answer and explanation will be appended to this post around 72 - 96 hours after the question is posted.&lt;/span&gt;&lt;br /&gt;Update: Answer posted&amp;nbsp;&lt;/p&gt;
&lt;p&gt;If you don't want your answer public, please post a comment like 'playing at home' so I can at least guage how many people are participating and whether the questions are useful.&lt;/p&gt;
&lt;p&gt;Follow&amp;nbsp;&lt;a href=&quot;http://twitter.com/javascriptquiz&quot;&gt;@JavaScriptQuiz&lt;/a&gt;&amp;nbsp;to know when the answer is up and to catch the next question.&lt;/p&gt;
&lt;div&gt;Happy hacking.&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;The answer I was looking for to this weeks question is &lt;strong&gt;Han&lt;/strong&gt;&amp;nbsp;because after all &lt;a href=&quot;http://en.wikipedia.org/wiki/Han_shot_first&quot;&gt;Han always shot first&lt;/a&gt;&amp;nbsp;;). Technically the answer to this weeks question is &lt;em&gt;it depends&lt;/em&gt;&amp;nbsp;because timers work slightly different in each JavaScript runtime but to be closes to &lt;a href=&quot;http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#timers&quot;&gt;the spec&lt;/a&gt;&amp;nbsp;you're looking at Han.&lt;/p&gt;
&lt;p&gt;The reason for this is that according to the spec the minimum for a timeout in JavaScript is 4 milliseconds and any timeout that is less than 4 milliseconds will be increased to 4 milliseconds. This means that the two functions have &lt;strong&gt;the same timeout value&lt;/strong&gt;&amp;nbsp;and they will be executed in the order they are added to the timeout queue.&lt;/p&gt;
&lt;p&gt;So next time you're using small timeouts be sure to test them across your different runtimes so that they actually work as expected.&lt;/p&gt;</content>
            </entry>
        
    
</feed>